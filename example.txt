[Part] Galosity Example Tutorial
[Character] ZZ
ZZ: Hi! I'm ZZ.
[Character] Ichiku
Ichiku: Hi, I'm Ichiku nya~
ZZ: Welcome to Galosity, a lite pure-text galgame editor. Hope you enjoy this journey.
ZZ: Here you can press Enter to the next sentence, and Backspace to the previous.

--Basic Editing Functions--
ZZ: There are several shortcuts that you'll need to know.
ZZ: Ctrl+S to save, and Ctrl+Shift+S to save as file.
Ichiku: By default, your file will be automatically saved every 5 minutes.
ZZ: Ctrl+O to open file, and Ctrl+N to create new file.
Ichiku: Press F5 to see how your script look like.
ZZ: \(\LaTeX\) is supported in Galosity.
Ichiku: Just put your formula between two $$s or \​( and \​).
ZZ: For example: \(a^2+b^2=c^2\).
ZZ: You can also type ^{superscript}, _{subscript}, %{hyperlink:https://en.wikipedia.org/wiki/Hyperlink}, and ~{notation:/noʊˈteɪʃn/} in Galosity.
ZZ: They are put between ^​{, _​{, %​{ or ~​{ and }.


--Character & Speeches--
ZZ: Define a character with tag `[Character]`.
Ichiku: Try: input `[ch` on a new line and press Tab. Galosity contains many Tab completions to improve productivity.
ZZ: Now input `[Character] ZZ`. This tells the system that there will be a character named ZZ.
Ichiku: Try: input `z` on a new line and press Tab.
Ichiku: Then input `ZZ: Hello Galosity!` and see how it is presented.

--Parts & Notes--
[Part] Notice this!
ZZ: It is recommended to organize long document with parts.
Ichiku: Have you noticed that the part has changed? Look at the top-left text.
[Part] You can also enter something like chapter name here...
Ichiku: Try: input `[Part] Chapter 0721`.

[Part] Notes
ZZ: Let's move on to notes.
ZZ: Notes are designed to show info which cannot be easily shown with pure text...
ZZ: This is to keep script-writers concentrated on scripts, instead of being disturbed by scenes, music, etc.
[Note] Yes pretend this is a beautiful photo of Ichiku
Ichiku: Try: input `[Note] sample note`.

[Part] Note? Comment?
ZZ: There is another similar function: input `//` at the start of a new line to create comments. The difference is that comments will be completely ignored by the system.
// Therefore you cannot see this comment nya~
Ichiku: Try: input some text on a new line and press Ctrl+/.

--Jumps & Anchors--
[Part] Goto Statement Considered Helpful
ZZ: These 2 functions are designed to make script structure clearer.
Ichiku: Try: input `[Anchor] anchor`...
Ichiku: Then input `[Jump] a` and press Tab.
ZZ: You can also jump to another script file by adding an '>'...
Ichiku: For example: `[Jump] > another.txt`.
ZZ: Or jumping to a website with `[Jump] % (site)`.
ZZ: You might be familiar with these if you have written some low-level programming languages...
Ichiku: Anyway. Let's [Jump] onto the next part.
[Jump] Control Blocks
Ichiku: ...And of course you won't see this sentence nya~
ZZ: But notice that [Part] tags still work, just like this:

[Part] Under Control
[Anchor] Control Blocks
ZZ: Of course, an important part of galgame is selection.
ZZ: If you've ever used something like switch-case statements while programming, you will feel this very natural.
Ichiku: Try: first input a sentence, then input `[Select]` on a new line.
Ichiku: Then input `[Case] 1:`, `case1`, `[Case] 2:`, `case2`, `[End]` on the following lines.
ZZ: As you see, there will be 2 selection buttons which leads you to different branches.
ZZ: In order not to pass through the following cases, input `[Break]` at the end of a branch.
ZZ: Choices can also be hidden or disabled...
Ichiku: For instance, try inputting `[Case] 3:show=false` and `[Case] 4:enable=false`.
Ichiku: Have you learnt how to use control blocks now?
[Select]
[Case] Yes:
[Jump] Variables
[Case] Maybe:enable=false
[Case] No:
ZZ: Fine... Let's learn again.
[Jump] Control Blocks
[End]

[Anchor] Variables
--Variables--
[Part] Variables & Enums
ZZ: Variables are used for more flexible controlling.
Ichiku: Try: input `[Var] x: 1`. This allows you to create a new variable, or assign to an existing variable.
ZZ: There are only 2 types of variables in Galosity: numbers and enums.
ZZ: Enums are use to represent value with several possible values.
Ichiku: For example, define an enum by `[Enum] Sex: Male, Female, Other`.
Ichiku: Then you can define an variable with type 'Sex' and value 'Male' by `[Var] sex: Sex.Male`.
ZZ: You can also simplify `Sex.Male` into `Male`. Galosity is smart enough to guess which you expect to use, as long as there are only one enum value named `Male`.
ZZ: By putting expressions between $​{ and }, you can interpolate them into messages.
Ichiku: Try: input `[Note] Your sex in $​{sex}`, and see how it's presented.
[Enum] Sex: Male, Female, Other
ZZ: You can choose your sex from a selection:
[Select]
[Case] Male:
[Var] sex: Male
[Break]
[Case] Female:
[Var] sex: Female
[Break]
[Case] Other:
[Var] sex: Other
[Break]
[End]
ZZ: You've selected: ${sex}.
ZZ: And there's a special enum type: bool. It has only 2 values: `bool.true` and `bool.false`.

[Part] Operators
ZZ: Galosity supports a set of operators.
Ichiku: Try: input `1+2=$​{1+2}`.
ZZ: Below are all the operators:
[Var] x: 42
[Var] y: 3.14
ZZ: +${x} is ${+x};
ZZ: -${x} is ${-x};
ZZ: ${x}+${y} is ${x+y};
ZZ: ${x}-${y} is ${x-y};
ZZ: ${x}*${y} is ${x*y};
ZZ: ${x}/${y} is ${x/y};
ZZ: ${x}//${y} is ${x//y};
ZZ: ${x}%${y} is ${x%y};
ZZ: ${x}<=${y} is ${x<=y};
ZZ: ${x}>=${y} is ${x>=y};
ZZ: ${x}<${y} is ${x<y};
ZZ: ${x}>${y} is ${x>y};
ZZ: ${x}==${y} is ${x==y};
ZZ: ${x}!=${y} is ${x!=y};
ZZ: ${x}^${y} is ${x^y};
[Var] x: true
[Var] y: false
ZZ: !${x} is ${!x};
ZZ: !${y} is ${!y};
ZZ: ${x}&${y} is ${x&y};
ZZ: ${x}|${y} is ${x|y};
[Var] x: Male
[Var] y: Female
ZZ: ${x}==${y} is ${x==y};
ZZ: ${x}!=${y} is ${x!=y};
ZZ: (${1} is num) is ${1 is num}
ZZ: (${true} is bool) is ${true is bool}
ZZ: (${Male} is Sex) is ${Male is Sex}
ZZ: (${1} is Sex) is ${1 is Sex}

[Part] Built-in Variables
ZZ: There are a few built-in vars in Galosity: `random` returns a random number from 0 to 1, and `randBool` returns a random bool.
Ichiku: Try: input `$​{random}`.
ZZ: These vars might have different values every time you use it.
ZZ: For instance, one call might return ${random} while the other returns ${random}.
ZZ: There are also vars representing real-world date time like dateNow=${dateNow}, and math constants like E=${E} and PI=${PI}.

[Part] Built-in Functions
ZZ: This part is simple. sin(PI/6)=${sin(PI/6)}, tan(PI/4)=${tan(PI/4)}, ln(E^3)=${ln(E^3)}, etc.
ZZ: There are also 3 special functions for enums: indexOf(Female)=${indexOf(Female)}, sizeOfType(Female)=${sizeOfType(Female)}, sex(1)=${Sex(1)}.

[Part] Switch-Case
ZZ: [Switch]-[Case] blocks are used often with variables.
ZZ: It's very similar to [Select]-[Case]: just change [Select] into [Switch].
Ichiku: Try: input `[Switch] 1+1`, `[Case] 0:`, `[Note] 1+1=0`, `[Case] 1:`, `[Note] 1+1=1`, `[Case] 2:`, `[Note] 1+1=2`, and then `[End]`.
ZZ: [Switch]-[Case] blocks can also fall through; but at every case, the condition is checked.

[Part] Inputting
ZZ: You can get an input from the user with [Input] tag.
Ichiku: Try: input `[Input] result, error`.
ZZ: Here, user input will be evaluated to a var; if the evaluation succeeded, `result` will be assigned and `error` will be false; if evaluation failed, `result` will not be defined, and `error` will be true.
Ichiku: Remember that you'll need to deal with errors yourself!
ZZ: For example, let's input two numbers below...
ZZ: First number:
[Anchor] num1
[Input] n1, err
[Switch] err
[Case] true:
ZZ: Error: cannot evaluate!
[Jump] num1
[End]
[Switch] n1 is num
[Case] false:
ZZ: Error: not a num!
[Jump] num1
[End]
ZZ: You inputted ${n1}!
ZZ: Second number:
[Anchor] num2
[Input] n2, err
[Switch] err
[Case] true:
ZZ: Error: cannot evaluate!
[Jump] num2
[End]
[Switch] n2 is num
[Case] false:
ZZ: Error: not a num!
[Jump] num2
[End]
ZZ: You inputted ${n2}!
ZZ: ${n1} * ${n2} = ${n1*n2}.

[Part] Delay & Pause
ZZ: Here are two simple but useful tags.
ZZ: [Delay] tag requires a number `t` as argument, and jumps to the next line after `t` seconds.
ZZ: [Pause] tag simply obstructs the parser from going onto the next line. This is often used after [Delay] tag.
Ichiku: Try: input 3 lines of speeches, and input `[Delay] 1` between the first and the second.
Ichiku: Then input `[Pause]` after `[Delay] 1` and see what's the difference.
[Delay] 1
[Pause]

[Part] Images
ZZ: Well... I lied. Galosity is not an pure-text editor.
ZZ: At first it was designed to be... But now it's hypertext.
Ichiku: Try: on the same path under your script file, create directory `src` and put image file `image.png` under it.
Ichiku: Then input `[Image] background: image.png` and see what happens.
[Image] background: bg1.png
Ichiku: Clear the background with `[Image] background: clear`.
[Image] background: clear
ZZ: There are also 3 positions for characters: left, center and right.
Ichiku: To use these positions, simply replace `background` with `left`, `center` or `right`.
[Image] background: bg2.png
[Image] left: Ichiku.png
Ichiku: Hi! I'm Ichiku! Am I cute?
ZZ: Whatever...
ZZ: You can also insert an custom position, with two argument representing the distance from the left side and from the bottom.
Ichiku: Try: input `[Image] pos: @40%,20%`, and then `[Image] pos: image.png`.
Ichiku: The distance from the bottom is defaulted to 0. For example, `[Image] pos: @40%` is valid.
[Image] pos: @40%,20%
[Image] pos: Ichiku.png

[Part] Transformations
ZZ: Transformations are used to transform images...
Ichiku: Try: insert an image on the left, and input `[Transform] left: rotate=90deg`.
[Transform] left: rotate=90deg
ZZ: There are many many arguments for transformations... Most of them come from css transform.
ZZ: There are: translate, translateX, translateY; scale, scaleX, scaleY; skew, skewX, skewY; and rotate.
ZZ: Make sure you contain proper units.
[Transform] left: rotate=0deg
Ichiku: Interpolations can be used in transformations, so it can be used to create various effects.
Ichiku: For instance, let me invite Minato here...
[Image] right: p1.webp
[Var] theta: 0
[Anchor] minato
[Transform] right: rotate=${theta}deg
[Var] theta: theta + 5
[Delay] 0.002
[Pause]
[Switch] theta < 720
[Case] false:
[Jump] end minato
[End]
[Jump] minato
[Anchor] end minato
[Delay] 1
[Pause]
[Image] right: clear
Ichiku: Isn't it very cool?

[Part] evil evals
ZZ: [Eval] enables you to evaluate javascript code in-place.
ZZ: This can be used for debugging or doing something the engine doesn't support yet.
Ichiku: Try: type `[Eval] alert('Hello eval!')`.
[Eval] alert('Hello eval!')
ZZ: Interpolation is also supported in evals.
ZZ: You might need to check the source code at %{:https://github.com/HZZcode/Galosity} for more information.

[Part] Funcs
ZZ: Sometimes we need to re-use a same part for many times. This is where functions make it easier.
Ichiku: Try: type `[Func] square(n)`, `[Return] n*n`, and then call with `[Call] square(3):m`. You'll see that `m` is 9.
[Func] square(n)
[Return] n*n
[Call] square(3):m
square(3) is ${m}.
ZZ: Functions can be complicated at some times. But don't worry, just use it whenever you need.

[Anchor] End of Tutorial
[Part] The End
ZZ: Here is the end of this tutorial.
Ichiku: Hope you enjoy editing with Galosity nya~