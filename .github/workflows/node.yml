name: Node.js Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20]
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Use Python ${{ matrix.python-version }} as shell
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Python Requests
        run: pip3 install requests

      - name: Set GH_TOKEN environment variable (Linux/Mac)
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV
        shell: bash

      - name: Set GH_TOKEN environment variable (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Install dependencies
        run: npm install

      - name: Copy MathJax
        run: import shutil; shutil.copytree('./node_modules/mathjax', './mathjax', dirs_exist_ok=True)
        shell: python

      - name: Download Font Awesome
        run: |
          import requests
          import zipfile
          import os

          url = 'https://use.fontawesome.com/releases/v6.7.2/fontawesome-free-6.7.2-web.zip'
          response = requests.get(url)
          with open('font-awesome.zip', 'wb') as f:
            f.write(response.content)

          with zipfile.ZipFile('font-awesome', 'r') as zip_ref:
            zip_ref.extractall('.')

          for folder_name in os.listdir('.'):
            os.rename(folder_name, 'fontawesome')
            break
        shell: python

      - name: Build the application
        run: npm run build --if-present

      - name: List files
        run: import os; print(os.listdir('.'))
        shell: python

      - name: Check if build output exists
        run: import os; exit(1) if not os.path.exists('build') else print(os.listdir('build'))
        shell: python

      - name: Check if tex-mml-chtml.js exists
        run: import os; exit(1) if not os.path.isfile('./mathjax/es5/tex-mml-chtml.js') else print("File exists")
        shell: python

      - name: Upload artifact for ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: galosity-build-${{ matrix.os }}
          path: build/
          
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
      
      - name: Install ESLint
        run: npm install eslint --save-dev

      - name: Run ESLint
        run: npx eslint . --max-warnings=0
